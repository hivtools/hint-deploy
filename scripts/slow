#!/usr/bin/env python3
"""
Usage:
  ./scripts/slow start [options]
  ./scripts/slow stop
  ./scripts/slow status

Options:
  --bandwidth=RATE  Bandwidth, in KB/s [default: 100]
  --latency=TIME    Latency, in ms [default: 50]
"""

import docker
import docopt
import hvac

from constellation import docker_util

CONTAINER_NAME = "hint_toxiproxy"
CLI = "/go/bin/toxiproxy-cli"


def start(bandwidth, latency):
    if docker_util.container_exists(CONTAINER_NAME):
        print("toxiproxy already running")
        exit(1)

    print("Creating container")
    cl = docker.client.from_env()
    tox = cl.containers.run("shopify/toxiproxy:2.1.4", name=CONTAINER_NAME,
                            ports={"8081/tcp": 8081}, auto_remove=True,
                            network="host", detach=True)

    print("Creating proxy")
    # Create a toxiproxy
    args = [CLI, "create", "hint", "--listen",
            "0.0.0.0:8081", "--upstream", "localhost:8080"]
    docker_util.exec_safely(tox, args)

    print("Configuring proxy")
    for direction in ["--upstream", "--downstream"]:
        args = [CLI, "toxic", "add", "hint", "--type", "bandwidth",
                direction, "-a", "rate={}".format(bandwidth)]
        docker_util.exec_safely(tox, args)

    args = [CLI, "toxic", "add", "hint", "--type", "latency",
            direction, "-a", "latency={}".format(latency)]
    docker_util.exec_safely(tox, args)

    inspect()


def inspect():
    tox = docker.client.from_env().containers.get(CONTAINER_NAME)
    res = docker_util.exec_safely(tox, [CLI, "inspect", "hint"])
    print(res.output.decode("UTF-8"))


def stop():
    if docker_util.container_exists(CONTAINER_NAME):
        print("Stopping container")
        docker.client.from_env().containers.get(CONTAINER_NAME).kill()


def status():
    if docker_util.container_exists(CONTAINER_NAME):
        print("toxiproxy: running")
        inspect()
    else:
        print("toxiproxy: stopped")


def main():
    args = docopt.docopt(__doc__)
    if args["start"]:
        start(int(args["--bandwidth"]), int(args["--latency"]))
    elif args["stop"]:
        stop()
    else:
        status()


if __name__ == "__main__":
    main()
