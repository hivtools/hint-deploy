#!/usr/bin/env bash

## Restore from a backup
set -ex

assert_file_exists() {
    if !([ ! -z "$1" ] && [ -f "$1" ]); then
        echo "Backup dir $1 does not exist"
        echo "Usage: restore <backup_dir>"
        exit 1
    fi
}

assert_all_data_exists() {
    if !([ ! -z "$1" ] && [ -d "$1" ] && [ -f "$1/db_dump.sql" ] && [ -f "$1/redis_backup.tar.gz" ] &&
        [ -f "$1/prerun_backup.tar.gz" ] && [ -f "$1/results_backup.tar.gz" ] && [ -f "$1/uploads_backup.tar.gz" ]); then
        echo "Backup dir $1 is incomplete"
        echo "Usage: restore <backup_dir>"
        exit 1
    fi
}

restore() {
    docker exec hint_db dropdb -f hint
    docker exec hint_db createdb -T template0 hint
    cat $1/db_dump.sql | docker exec -i hint_db psql -U postgres hint
    docker run --rm --volumes-from hint_redis -v $1:/backup busybox tar -xvf /backup/redis_backup.tar.gz -C /data
    docker run --rm --volumes-from hint_hintr -v $1:/backup busybox tar -xvf /backup/prerun_backup.tar.gz -C /prerun
    docker run --rm --volumes-from hint_hintr -v $1:/backup busybox tar -xvf /backup/results_backup.tar.gz -C /results
    docker run --rm --volumes-from hint_hintr -v $1:/backup busybox tar -xvf /backup/uploads_backup.tar.gz -C /uploads
}

assert_file_exists $1
RESTORE_DIR="$(
    cd "$(dirname "$1")"
    pwd
)"
RESTORE_PATH=$RESTORE_DIR/$(basename "$1")
RESTORE_WORKING_DIR=$RESTORE_DIR/working
mkdir $RESTORE_WORKING_DIR
clean_up() {
    echo "Restore failed, cleaning up working dir"
    rm -rf $RESTORE_WORKING_DIR
    exit 1
}
trap clean_up ERR

tar -xvf $1 -C $RESTORE_WORKING_DIR
assert_all_data_exists $RESTORE_WORKING_DIR
restore $RESTORE_WORKING_DIR
echo "Restore complete"
rm -rf $RESTORE_WORKING_DIR
