#!/usr/bin/env bash

## Restore from a backup
set -ex

volumes=("hint_db_data", "hint_redis_data", "hint_prerun", "hint_results", "hint_uploads")
assert_file_exists() {
    if !([ ! -z "$1" ] && [ -f "$1" ]); then
        echo "Backup dir $1 does not exist"
        echo "Usage: restore <backup_dir>"
        exit 1
    fi
}

assert_all_data_exists() {
    if !([ ! -z "$1" ] && [ -d "$1" ] && [ -f "$1/db_dump.sql" ] && [ -f "$1/redis_backup.tar.gz" ] &&
        [ -f "$1/prerun_backup.tar.gz" ] && [ -f "$1/results_backup.tar.gz" ] && [ -f "$1/uploads_backup.tar.gz" ]); then
        echo "Backup dir $1 is incomplete"
        echo "Usage: restore <backup_dir>"
        exit 1
    fi
}

create_volumes() {
    existing_volumes=$(docker volume ls --format '{{.Name}}')
    for volume in ${volumes[@]}; do
        if [[ " ${existing_volumes[*]} " =~ " ${volume} " ]]; then
            echo "Volume ${volume} already exists, remove volume before running restore"
            exit 1
        fi
    done
    for volume in ${volumes[@]}; do
        echo "Creating volume ${volume}"
        docker volume create ${volume}
    done
}

restore() {
    create_volumes

    cat $1/db_dump.sql | docker exec -i hint_db psql -U postgres hint
    docker run --rm -v hint_db_data:/data -v $1:/backup postgres:10.3 ### TODO
    docker run --rm -v hint_redis_data:/data $1:/backup busybox tar -xvf /backup/redis_backup.tar -C /data
    docker run --rm -v hint_prerun:/data -v $1:/backup busybox tar -xvf /backup/prerun_backup.tar -C /data
    docker run --rm -v hint_results:/data -v $1:/backup busybox tar -xvf /backup/results_backup.tar -C /data
    docker run --rm -v hint_uploads:/data -v $1:/backup busybox tar -xvf /backup/uploads_backup.tar -C /data
    ## Restart everything with most up to date
    ./hint upgrade all
}

assert_file_exists $1
RESTORE_DIR="$(
    cd "$(dirname "$1")"
    pwd
)"
RESTORE_PATH=$RESTORE_DIR/$(basename "$1")
RESTORE_WORKING_DIR=$RESTORE_DIR/working
mkdir $RESTORE_WORKING_DIR
clean_up() {
    echo "Restore failed, cleaning up working dir"
    rm -rf $RESTORE_WORKING_DIR
    exit 1
}
trap clean_up ERR

tar -xvf $1 -C $RESTORE_WORKING_DIR
assert_all_data_exists $RESTORE_WORKING_DIR
restore $RESTORE_WORKING_DIR
echo "Restore complete"
rm -rf $RESTORE_WORKING_DIR
