#!/usr/bin/env bash

## Restore from a backup
set -e

volumes=("hint_db_data" "hint_redis_data" "hint_prerun" "hint_results" "hint_uploads")

array_contains() {
    local seeking=$1
    shift
    local in=1
    for element; do
        if [[ $element == "$seeking" ]]; then
            in=0
            break
        fi
    done
    return $in
}

assert_file_exists() {
    if !([ ! -z "$1" ] && [ -f "$1" ]); then
        echo "Backup dir $1 does not exist"
        echo "Usage: restore <backup_dir>"
        exit 1
    fi
}

assert_all_data_exists() {
    if !([ ! -z "$1" ] && [ -d "$1" ] && [ -f "$1/db_dump.sql" ] && [ -f "$1/dump.rdb" ] &&
        [ -f "$1/prerun_backup.tar" ] && [ -f "$1/results_backup.tar" ] && [ -f "$1/uploads_backup.tar" ]); then
        echo "Backup dir $1 is incomplete"
        echo "Usage: restore <backup_dir>"
        exit 1
    fi
}

create_volumes() {
    existing_volumes=($(docker volume ls --format '{{.Name}}'))
    for volume in ${volumes[@]}; do
        if array_contains "$volume" "${existing_volumes[@]}"; then
            echo "Volume '${volume}' already exists, remove volume before running restore"
            exit 1
        fi
    done
    for volume in ${volumes[@]}; do
        echo "Creating volume ${volume}"
        docker volume create ${volume}
    done
}

restore() {
    create_volumes
    docker run --rm -d -v hint_db_data:/pgdata -e POSTGRES_PASSWORD=password --name restore_pg postgres:10.3
    sleep 10 ## Ideally here we would do something cleverer and poll for db being ready to accept connections
    docker exec -i restore_pg createdb -U postgres hint
    docker exec -i restore_pg psql -U postgres -d hint <$1/db_dump.sql
    docker stop restore_pg
    docker run --rm -v hint_redis_data:/data --name helper busybox true
    docker cp $1/dump.rdb helper:/data
    docker stop helper
    docker run --rm -v hint_prerun:/data -v $1:/backup busybox tar -xvf /backup/prerun_backup.tar -C /data
    docker run --rm -v hint_results:/data -v $1:/backup busybox tar -xvf /backup/results_backup.tar -C /data
    docker run --rm -v hint_uploads:/data -v $1:/backup busybox tar -xvf /backup/uploads_backup.tar -C /data
}

assert_file_exists $1
RESTORE_DIR="$(
    cd "$(dirname "$1")"
    pwd
)"
RESTORE_PATH=$RESTORE_DIR/$(basename "$1")
RESTORE_WORKING_DIR=$RESTORE_DIR/working
mkdir $RESTORE_WORKING_DIR
clean_up() {
    echo "Restore failed, cleaning up working dir"
    rm -rf $RESTORE_WORKING_DIR
    docker stop restore_pg helper
    exit 1
}
trap clean_up ERR

tar -xvf $1 -C $RESTORE_WORKING_DIR
assert_all_data_exists $RESTORE_WORKING_DIR
restore $RESTORE_WORKING_DIR
echo "Restore complete"
rm -rf $RESTORE_WORKING_DIR
